<?php

/**
 * Implementation of hook_views_api().
 */
function context_admin_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'context_admin') . '/includes',
  );
}

function context_admin_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'ctools' || $module == 'context_admin') {
    return 'plugins/' . $plugin;
  }
}

function context_admin_get_path($file, $base_path = FALSE, $module = 'context_admin') {
  $output = $base_path ? base_path() : '';
  return $output . drupal_get_path('module', $module) . '/' . $file;
}

function context_admin_load($name) {
  $cache = new stdClass();
  $cache->task_name = $name;
  return $cache;
}

function context_admin_get_page_cache($name) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_get('context_admin', $name);
  if (!$cache) {
    $cache = context_admin_load($name);
    $cache->locked = ctools_object_cache_test('context_admin', $name);
  }

  return $cache;
}

/**
 * Store changes to a task handler in the object cache.
 */
function context_admin_set_page_cache($name, $page) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_set('context_admin', $name, $page);
}

/**
 * Remove an item from the object cache.
 */
function context_admin_clear_page_cache($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('context_admin', $name);
}

function context_admin_get_plugins($type, $options = array()) {
  $id = $options['id'] ? $options['id'] : NULL;
  $context = $options['context'] ? $options['context'] : 'global';
  if (is_null($id)) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('context_admin', $type);
    foreach ($plugins as $key => $plugin) {
      if (!is_array($plugin['context'])) {
        $plugin['context'] = array($plugin['context']);
      }
      if (!in_array($context, $plugin['context'])) {
        unset($plugins[$key]);
      }
      if ($plugin['restriction arguments'] && $plugin['restriction callback']) {
        // Probably need some sort of loading mechanism in case the function is in an include somewhere.
        $access = call_user_func_array($plugin['restriction callback'], $plugin['restriction arguments']);
      }
      elseif ($plugin['restriction arguments']) {
        $access = module_exists($plugin['restriction arguments'][0]);
      }
      else {
        $access = TRUE;
      }
      if (!$access) {
        unset($plugins[$key]);
      }
    }
  }
  else {
    $plugins = ctools_get_plugins('context_admin', $type, $id);
  }
  return $plugins;
}

function context_admin_form_alter(&$form, $form_state, $form_id) {
  // Checking to make sure that we're on a context_admin generated node form
  $page = page_manager_get_current_page();
  if ($page) {
    $callback = $page['handler']->conf['context_admin_options'];
    $plugin = context_admin_get_plugins('administrations', array('id' => $callback));
    $dir = module_invoke($plugin['module'], 'ctools_plugin_directory', 'context_admin', 'administrations');
    ctools_include($plugin['name'], $plugin['module'], $dir);
    module_invoke($plugin['module'] .'_'. $callback, 'form_alter', $form, $form_state, $form_id);
  }
}

function context_admin_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $page = page_manager_get_current_page();
  if ($page && ($op != 'load')) {
    $callback = $page['handler']->conf['context_admin_options'];
    $plugin = context_admin_get_plugins('administrations', array('id' => $callback));
    $dir = module_invoke($plugin['module'], 'ctools_plugin_directory', 'context_admin', 'administrations');
    ctools_include($plugin['name'], $plugin['module'], $dir);
    module_invoke($plugin['module'] .'_'. $callback, 'nodeapi', $node, $op, $a3, $a4);
  }
  elseif ($page && $op == 'load') {
    $callback = $page['handler']->conf['context_admin_options'];
    $plugin = context_admin_get_plugins('administrations', array('id' => $callback));
    $dir = module_invoke($plugin['module'], 'ctools_plugin_directory', 'context_admin', 'administrations');
    ctools_include($plugin['name'], $plugin['module'], $dir);
    return module_invoke($plugin['module'] .'_'. $callback, 'nodeapi', $node, $op, $a3, $a4);
  }
}
